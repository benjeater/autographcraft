import { createServer } from 'node:http';
import { createYoga, createSchema } from 'graphql-yoga';
import { loadFiles } from '@graphql-tools/load-files';
import mongoose from 'mongoose';
import resolvers from './generatedTypes/resolvers'; // The resolvers generated by AutoGraphCraft
import {
  type AutoGraphCraftContextParams,
  createAutoGraphCraftContext, // The create context function generated by AutoGraphCraft
} from './generatedUtils';

import config from './autographcraft.config.js';

// Constants
const SERVER_PORT = 3000;
const MONGODB_URI = 'mongodb://localhost:27017/autographcraft';

// Connect to the database (MongoDB in this case)
const mongooseConnection = mongoose.createConnection(MONGODB_URI);

async function main() {
  // Create the schema using the typedefs and resolvers generated by AutoGraphCraft
  const schema = createSchema({
    typeDefs: await loadFiles('./generatedTypes/typeDefs.graphql'), // The typedefs generated by AutoGraphCraft
    resolvers: [resolvers],
  });

  // Create the data that will be used by the create context function
  const autoGraphCraftContextParams: AutoGraphCraftContextParams = {
    mongooseConnection,
    logger: console,
    config,
    authInitialisationData: { User: '673c462c7e4a338bdee980c8' },
    isAdmin: false,
  };

  // Create the Yoga server
  const yoga = createYoga({
    schema,
    context: async (initialContext) => {
      const autographcraftContext = await createAutoGraphCraftContext(
        autoGraphCraftContextParams
      );
      const context = {
        ...initialContext,
        ...autographcraftContext,
      };
      return context;
    },
  });

  // Start the server
  const server = createServer(yoga);
  server.listen(SERVER_PORT, () => {
    console.info(
      `Server is running on http://localhost:${SERVER_PORT}/graphql`
    );
  });
}

main();
