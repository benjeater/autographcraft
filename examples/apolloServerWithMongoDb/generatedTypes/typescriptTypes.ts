/* eslint-disable */
// @ts-nocheck
// prettier-ignore
// This file has been generated by AutoGraph. Do not edit this file directly.
// Any changes made to this file will be overwritten when AutoGraphCraft is next run.

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  ISO8601DateTime: { input: Date; output: Date; }
};

export type BooleanInput = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  ne?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FloatInput = {
  between?: InputMaybe<Array<Scalars['Float']['input']>>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  ge?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  le?: InputMaybe<Scalars['Float']['input']>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  ne?: InputMaybe<Scalars['Float']['input']>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type IdInput = {
  between?: InputMaybe<Array<Scalars['ID']['input']>>;
  eq?: InputMaybe<Scalars['ID']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  ge?: InputMaybe<Scalars['ID']['input']>;
  gt?: InputMaybe<Scalars['ID']['input']>;
  in?: InputMaybe<Array<Scalars['ID']['input']>>;
  le?: InputMaybe<Scalars['ID']['input']>;
  lt?: InputMaybe<Scalars['ID']['input']>;
  ne?: InputMaybe<Scalars['ID']['input']>;
  notIn?: InputMaybe<Array<Scalars['ID']['input']>>;
};

export type Iso8601DateTimeInput = {
  between?: InputMaybe<Array<Scalars['ISO8601DateTime']['input']>>;
  eq?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  ge?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  gt?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  le?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  lt?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  ne?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
};

export type IntInput = {
  between?: InputMaybe<Array<Scalars['Int']['input']>>;
  eq?: InputMaybe<Scalars['Int']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  ge?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  le?: InputMaybe<Scalars['Int']['input']>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  ne?: InputMaybe<Scalars['Int']['input']>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type ListUserResponse = {
  __typename?: 'ListUserResponse';
  nextToken?: Maybe<Scalars['String']['output']>;
  results: Array<Maybe<User>>;
};

export type ListUserSubscriptionResponse = {
  __typename?: 'ListUserSubscriptionResponse';
  nextToken?: Maybe<Scalars['String']['output']>;
  results: Array<Maybe<UserSubscription>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createUser?: Maybe<User>;
  createUserSubscription?: Maybe<UserSubscription>;
  deleteUser?: Maybe<User>;
  deleteUserSubscription?: Maybe<UserSubscription>;
  updateUser?: Maybe<User>;
  updateUserSubscription?: Maybe<UserSubscription>;
};


export type MutationCreateUserArgs = {
  input: UserCreateInput;
};


export type MutationCreateUserSubscriptionArgs = {
  input: UserSubscriptionCreateInput;
};


export type MutationDeleteUserArgs = {
  id: Scalars['ID']['input'];
};


export type MutationDeleteUserSubscriptionArgs = {
  id: Scalars['ID']['input'];
};


export type MutationUpdateUserArgs = {
  input: UserUpdateInput;
};


export type MutationUpdateUserSubscriptionArgs = {
  input: UserSubscriptionUpdateInput;
};

export type Query = {
  __typename?: 'Query';
  listUser?: Maybe<ListUserResponse>;
  listUserSubscription?: Maybe<ListUserSubscriptionResponse>;
  readUser?: Maybe<User>;
  readUserSubscription?: Maybe<UserSubscription>;
};


export type QueryListUserArgs = {
  filter?: InputMaybe<UserListFilter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  nextToken?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<UserSortInput>>;
};


export type QueryListUserSubscriptionArgs = {
  filter?: InputMaybe<UserSubscriptionListFilter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  nextToken?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<UserSubscriptionSortInput>>;
};


export type QueryReadUserArgs = {
  id: Scalars['ID']['input'];
};


export type QueryReadUserSubscriptionArgs = {
  id: Scalars['ID']['input'];
};

export enum SortDirection {
  Asc = 'ASC',
  Desc = 'DESC'
}

export type StringInput = {
  between?: InputMaybe<Array<Scalars['String']['input']>>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  ge?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  le?: InputMaybe<Scalars['String']['input']>;
  lt?: InputMaybe<Scalars['String']['input']>;
  ne?: InputMaybe<Scalars['String']['input']>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type User = {
  __typename?: 'User';
  createdAt: Scalars['ISO8601DateTime']['output'];
  deletedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  firstName: Scalars['String']['output'];
  floaty?: Maybe<Scalars['Float']['output']>;
  id: Scalars['ID']['output'];
  lastTime: Scalars['String']['output'];
  pronouns?: Maybe<Scalars['String']['output']>;
  salutation?: Maybe<Scalars['String']['output']>;
  subscriptions?: Maybe<ListUserSubscriptionResponse>;
  updatedAt: Scalars['ISO8601DateTime']['output'];
};


export type UserSubscriptionsArgs = {
  filter?: InputMaybe<UserSubscriptionListFilter>;
  limit?: InputMaybe<Scalars['Int']['input']>;
  nextToken?: InputMaybe<Scalars['String']['input']>;
  sort?: InputMaybe<Array<UserSubscriptionSortInput>>;
};

export type UserCreateInput = {
  firstName: Scalars['String']['input'];
  floaty?: InputMaybe<Scalars['Float']['input']>;
  lastTime: Scalars['String']['input'];
  pronouns?: InputMaybe<Scalars['String']['input']>;
  salutation?: InputMaybe<Scalars['String']['input']>;
};

export type UserDeleteInput = {
  id: Scalars['ID']['input'];
};

export type UserListFilter = {
  and?: InputMaybe<Array<InputMaybe<UserListFilter>>>;
  createdAt?: InputMaybe<Iso8601DateTimeInput>;
  deletedAt?: InputMaybe<Iso8601DateTimeInput>;
  firstName?: InputMaybe<StringInput>;
  floaty?: InputMaybe<FloatInput>;
  id?: InputMaybe<IdInput>;
  lastTime?: InputMaybe<StringInput>;
  not?: InputMaybe<UserListFilter>;
  or?: InputMaybe<Array<InputMaybe<UserListFilter>>>;
  pronouns?: InputMaybe<StringInput>;
  salutation?: InputMaybe<StringInput>;
  updatedAt?: InputMaybe<Iso8601DateTimeInput>;
};

export enum UserSortField {
  CreatedAt = 'createdAt',
  DeletedAt = 'deletedAt',
  FirstName = 'firstName',
  Floaty = 'floaty',
  Id = 'id',
  LastTime = 'lastTime',
  Pronouns = 'pronouns',
  Salutation = 'salutation',
  UpdatedAt = 'updatedAt'
}

export type UserSortInput = {
  direction: SortDirection;
  field: UserSortField;
};

export type UserSubscription = {
  __typename?: 'UserSubscription';
  createdAt: Scalars['ISO8601DateTime']['output'];
  deletedAt?: Maybe<Scalars['ISO8601DateTime']['output']>;
  expirationDate?: Maybe<Scalars['ISO8601DateTime']['output']>;
  id: Scalars['ID']['output'];
  startDate: Scalars['ISO8601DateTime']['output'];
  subscriptionName: Scalars['String']['output'];
  updatedAt: Scalars['ISO8601DateTime']['output'];
  user?: Maybe<User>;
  userId: Scalars['ID']['output'];
};

export type UserSubscriptionCreateInput = {
  expirationDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  startDate: Scalars['ISO8601DateTime']['input'];
  subscriptionName: Scalars['String']['input'];
  userId: Scalars['ID']['input'];
};

export type UserSubscriptionDeleteInput = {
  id: Scalars['ID']['input'];
};

export type UserSubscriptionListFilter = {
  and?: InputMaybe<Array<InputMaybe<UserSubscriptionListFilter>>>;
  createdAt?: InputMaybe<Iso8601DateTimeInput>;
  deletedAt?: InputMaybe<Iso8601DateTimeInput>;
  expirationDate?: InputMaybe<Iso8601DateTimeInput>;
  id?: InputMaybe<IdInput>;
  not?: InputMaybe<UserSubscriptionListFilter>;
  or?: InputMaybe<Array<InputMaybe<UserSubscriptionListFilter>>>;
  startDate?: InputMaybe<Iso8601DateTimeInput>;
  subscriptionName?: InputMaybe<StringInput>;
  updatedAt?: InputMaybe<Iso8601DateTimeInput>;
  userId?: InputMaybe<IdInput>;
};

export enum UserSubscriptionSortField {
  CreatedAt = 'createdAt',
  DeletedAt = 'deletedAt',
  ExpirationDate = 'expirationDate',
  Id = 'id',
  StartDate = 'startDate',
  SubscriptionName = 'subscriptionName',
  UpdatedAt = 'updatedAt',
  UserId = 'userId'
}

export type UserSubscriptionSortInput = {
  direction: SortDirection;
  field: UserSubscriptionSortField;
};

export type UserSubscriptionUpdateInput = {
  expirationDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  id: Scalars['ID']['input'];
  startDate?: InputMaybe<Scalars['ISO8601DateTime']['input']>;
  subscriptionName?: InputMaybe<Scalars['String']['input']>;
  userId?: InputMaybe<Scalars['ID']['input']>;
};

export type UserUpdateInput = {
  firstName?: InputMaybe<Scalars['String']['input']>;
  floaty?: InputMaybe<Scalars['Float']['input']>;
  id: Scalars['ID']['input'];
  lastTime?: InputMaybe<Scalars['String']['input']>;
  pronouns?: InputMaybe<Scalars['String']['input']>;
  salutation?: InputMaybe<Scalars['String']['input']>;
};
