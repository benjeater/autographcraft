/* eslint-disable */
// @ts-nocheck
// prettier-ignore
// This file has been generated by AutoGraph. Do not edit this file directly.
// Any changes made to this file will be overwritten when AutoGraphCraft is next run.

import mongoose from "mongoose";
import {
  AutoGraphCraftAuthorisation,
  type AutoGraphCraftAuthorisationParams,
  type AutoGraphCraftResolverContext,
  type AutoGraphCraftConfiguration,
  type Logger,
} from '@autographcraft/core';

export type AutoGraphCraftContextParams = {
  mongooseConnection: mongoose.Connection;
  logger?: Logger;
  config: AutoGraphCraftConfiguration;
  authInitialisationData: Record<string, string>;
  isAdmin?: boolean;
};

export async function createAutoGraphCraftContext(
  params: AutoGraphCraftContextParams
): Promise<AutoGraphCraftResolverContext> {
  const { mongooseConnection, logger, config, authInitialisationData } = params;

  const authParams: AutoGraphCraftAuthorisationParams = {
    mongooseConnection,
    databaseType: config.databaseType,
    mongoDbConnectionLibrary: config.mongoDbConnectionLibrary!,
    authorisationStructure: config.authorisationStructure,
    logger: logger,
    isAdmin: params.isAdmin || false,
  };

  const authorisationInstance = new AutoGraphCraftAuthorisation(authParams);
  await authorisationInstance.initialise(authInitialisationData);

  return {
    autographcraft: {
      authorisationInstance,
      mongooseConnection,
      logger,
    },
  };
}
